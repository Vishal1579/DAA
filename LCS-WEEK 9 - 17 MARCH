LCS

TIME COMPLEXITY 
O(2n)

---------------------------------------------------------------------------------------------------------------------------------------------------------

ALGORITHM 

LCS(X, Y):
  // Initialize a 2D array to store the lengths of LCSs
  n = length(X)
  m = length(Y)
  L = array(n+1, m+1)
  
  // Compute the lengths of LCSs for all prefixes of X and Y
  for i in 0 to n:
    for j in 0 to m:
      if i == 0 or j == 0:
        L[i][j] = 0
      else if X[i-1] == Y[j-1]:
        L[i][j] = L[i-1][j-1] + 1
      else:
        L[i][j] = max(L[i-1][j], L[i][j-1])
  
  // Traverse the 2D array to construct the LCS
  lcs = ""
  i = n
  j = m
  while i > 0 and j > 0:
    if X[i-1] == Y[j-1]:
      lcs = X[i-1] + lcs
      i -= 1
      j -= 1
    else if L[i-1][j] > L[i][j-1]:
      i -= 1
    else:
      j -= 1
  
  // Return the LCS and its length
  return lcs, length(lcs) 
  ---------------------------------------------------------------------------------------------------------------------------------------------------------
  
CODE 


// A Naive recursive implementation of LCS problem

#include <stdio.h>

int max(int a, int b);

// Returns length of LCS for X[0..m-1], Y[0..n-1]
int lcs(char* X, char* Y, int m, int n)
{
	if (m == 0 || n == 0)
		return 0;
	if (X[m - 1] == Y[n - 1])
		return 1 + lcs(X, Y, m - 1, n - 1);
	else
		return max(lcs(X, Y, m, n - 1),
				lcs(X, Y, m - 1, n));
}

// Utility function to get max of 2 integers
int max(int a, int b) { return (a > b) ? a : b; }

// Driver code
int main()
{
	char S1[] = "AGGTAB";
	char S2[] = "GXTXAYB";
	int m = strlen(S1);
	int n = strlen(S2);

	printf("Length of LCS is %d", lcs(S1, S2, m, n));

	return 0;
} 

OUTOUT 

LENGTH OF LCS IS 4 
---------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------
